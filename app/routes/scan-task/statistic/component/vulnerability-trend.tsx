import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts"
import { memo } from "react"
import React from "react"

interface VulnerabilityTrendProps {
  data: {
    list: {
      id: string;
      url: string;
      vulnerability: string;
      vulnid: string;
      matched: string;
      time: string;
      request: string;
      response: string;
      level: string;
      status: number;
      tags: any;
    }[];
    total: number;
  };
}

const VulnerabilityTrendComponent = ({ data }: VulnerabilityTrendProps) => {
  const lineColors = {
    critical: "#E0004C", // Tech Magenta
    high: "#FFA726",     // Orange (kept for high visibility)
    medium: "#00A9E0",   // Tech Cyan
  }

  // 生成趋势数据
  const vulnerabilityTrendData = React.useMemo(() => {
    // 如果没有数据，返回默认的月份数据
    if (!data.list.length) {
      return Array.from({ length: 12 }, (_, i) => ({
        month: `${i + 1}月`,
        critical: 0,
        high: 0,
        medium: 0
      }));
    }

    // 按月份分组漏洞数据
    const monthlyData: Record<string, { critical: number; high: number; medium: number }> = {};
    
    data.list.forEach(vuln => {
      const date = new Date(vuln.time);
      const month = `${date.getMonth() + 1}月`;
      
      if (!monthlyData[month]) {
        monthlyData[month] = { critical: 0, high: 0, medium: 0 };
      }
      
      const level = vuln.level.toLowerCase();
      if (level.includes('critical') || level.includes('严重')) {
        monthlyData[month].critical++;
      } else if (level.includes('high') || level.includes('高')) {
        monthlyData[month].high++;
      } else if (level.includes('medium') || level.includes('中')) {
        monthlyData[month].medium++;
      }
    });

    // 生成12个月的数据
    return Array.from({ length: 12 }, (_, i) => {
      const month = `${i + 1}月`;
      return {
        month,
        critical: monthlyData[month]?.critical || 0,
        high: monthlyData[month]?.high || 0,
        medium: monthlyData[month]?.medium || 0
      };
    });
  }, [data.list]);

  return (
    <div className="h-full min-h-[200px]">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart
          data={vulnerabilityTrendData}
          margin={{
            top: 5,
            right: 15,
            left: 5,
            bottom: 5,
          }}
        >
          <CartesianGrid strokeDasharray="3 3" stroke="#103A5C" />
          <XAxis 
            dataKey="month" 
            stroke="#7dd3fc" 
            fontSize={9}
            interval={0}
            angle={-45}
            textAnchor="end"
            height={60}
          />
          <YAxis 
            stroke="#7dd3fc" 
            fontSize={9}
            width={30}
          />
          <Tooltip
            contentStyle={{ 
              backgroundColor: "#071e36", 
              borderColor: "#00A9E0", 
              borderRadius: "8px",
              border: "1px solid #00A9E0",
              boxShadow: "0 4px 12px rgba(0, 169, 224, 0.2)",
              fontSize: "12px"
            }}
            itemStyle={{ color: "#e0e0e0", fontSize: "12px" }}
            labelStyle={{ color: "#cbd5e1", marginBottom: "5px", fontSize: "12px" }}
            cursor={{ stroke: "#00A9E0", strokeWidth: 1, strokeDasharray: "3 3" }}
          />
          <Legend
            iconSize={8}
            iconType="square"
            wrapperStyle={{ 
              paddingTop: "10px", 
              fontSize: "10px"
            }}
            formatter={(value, entry) => {
              const color = entry.color
              let label = ""
              if (value === "critical") label = "严重"
              else if (value === "high") label = "高危"
              else if (value === "medium") label = "中危"
              return <span style={{ color: color, fontSize: "10px" }}>{label}</span>
            }}
          />
          <Line 
            type="monotone" 
            dataKey="critical" 
            stroke={lineColors.critical} 
            strokeWidth={2} 
            activeDot={{ r: 4, strokeWidth: 0, fill: lineColors.critical }} 
            dot={{ r: 1.5, fill: lineColors.critical, strokeWidth: 0 }} 
          />
          <Line 
            type="monotone" 
            dataKey="high" 
            stroke={lineColors.high} 
            strokeWidth={2} 
            activeDot={{ r: 4, strokeWidth: 0, fill: lineColors.high }} 
            dot={{ r: 1.5, fill: lineColors.high, strokeWidth: 0 }} 
          />
          <Line 
            type="monotone" 
            dataKey="medium" 
            stroke={lineColors.medium} 
            strokeWidth={2} 
            activeDot={{ r: 4, strokeWidth: 0, fill: lineColors.medium }} 
            dot={{ r: 1.5, fill: lineColors.medium, strokeWidth: 0 }} 
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
}

export const VulnerabilityTrend = memo(VulnerabilityTrendComponent)
