import { Locale } from "#/i18n";
import { SCAN_TASK_ASSETS_ROUTE, useLanguageRoute } from "#/routes";
import { Badge } from "#/components/ui/badge";
import { Button } from "#/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "#/components/ui/card";
import { Separator } from "#/components/ui/separator";
import { ArrowLeft, ExternalLink, MapPin, Server } from "lucide-react";
import Link from "next/link";

// 模拟数据
const mockVulnerability = {
    id: "vuln-001",
    title: "Swagger 信息泄露",
    status: "unfixed",
    network: "external",
    severity: "high",
    asset: {
        ip: "117.60.146.75",
        location: "中国 江苏省 连云港市",
        provider: "Chinanet",
        hostname: "lygjgsw.cn",
        httpStatus: "404 - 未找到",
        server: "Apache Tomcat/8.0.47",
        tags: ["Swagger UI", "Nginx", "Apache Tomcat"],
        boundDomains: ["wx.lygjgsw.cn"]
    },
    timeline: {
        firstSeen: "2025-03-26 07:11",
        lastSeen: "2025-03-26 07:11"
    },
    url: "http://117.60.146.75:8085/web/swagger-resources",
    description: "Swagger 是一个用于API文档生成和API测试的工具，如果不正确配置，可能会暴露敏感信息。",
    impact: "如果Swagger配置不当，攻击者可能利用它来获取API的详细信息，包括端点、参数、认证机制等，这可能被用来执行API滥用、数据泄露或其他攻击。",
    solution: [
        "确保Swagger仅在开发环境中启用，生产环境中应禁用或严格限制访问。",
        "使用访问控制列表（ACL）限制对Swagger UI的访问，只允许特定的IP地址或用户访问。",
        "配置API安全措施，如API密钥、OAuth等认证机制，以防止未授权访问。",
        "定期审查和更新Swagger配置，确保其符合最佳安全实践。",
        "如果可能，使用Swagger的私有版本或定制版本，以减少已知漏洞的风险。"
    ],
    proof: "http://117.60.146.75:8085/web/v2/api-docs"
};

export default async function VulnerabilityDetailPage({
    params
}: {
    params: Promise<{ taskId: string; vulnerabilityId: string; lang: Locale }>;
}) {
    const { taskId, vulnerabilityId, lang } = await params;
    const r = useLanguageRoute(lang);

    return (
        <div className="space-y-6 p-6">
            {/* 返回按钮 */}
            <div className="flex items-center gap-4">
                <Button variant="ghost" size="sm" asChild>
                    <Link href={r(SCAN_TASK_ASSETS_ROUTE, { params: { taskId } })}>
                        <ArrowLeft className="w-4 h-4 mr-2" />
                        返回漏洞列表
                    </Link>
                </Button>
            </div>

            {/* 漏洞标题和状态 */}
            <div className="flex items-center justify-between">
                <div>
                    <h1 className="text-2xl font-bold">{mockVulnerability.title}</h1>
                    <div className="flex items-center gap-2 mt-2">
                        <Badge variant={mockVulnerability.status === "unfixed" ? "destructive" : "default"}>
                            {mockVulnerability.status === "unfixed" ? "未修复" : "已修复"}
                        </Badge>
                        <Badge variant="outline">{mockVulnerability.network === "external" ? "外网" : "内网"}</Badge>
                        <Badge className="bg-red-500 text-white">高危</Badge>
                    </div>
                </div>
                <Button variant="outline" size="sm" asChild>
                    <a href={mockVulnerability.url} target="_blank" rel="noopener noreferrer">
                        <ExternalLink className="w-4 h-4 mr-2" />
                        访问漏洞地址
                    </a>
                </Button>
            </div>

            <Separator />

            {/* 资产信息 */}
            <Card>
                <CardHeader>
                    <CardTitle>所属资产</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                <Server className="w-4 h-4" />
                                <span>IP地址</span>
                            </div>
                            <div className="font-medium">{mockVulnerability.asset.ip}</div>
                        </div>
                        <div className="space-y-2">
                            <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                <MapPin className="w-4 h-4" />
                                <span>地理位置</span>
                            </div>
                            <div className="font-medium">{mockVulnerability.asset.location}</div>
                        </div>
                    </div>
                    <div className="space-y-2">
                        <div className="text-sm text-muted-foreground">服务信息</div>
                        <div className="font-medium">{mockVulnerability.asset.server}</div>
                    </div>
                    <div className="space-y-2">
                        <div className="text-sm text-muted-foreground">绑定域名</div>
                        <div className="flex flex-wrap gap-2">
                            {mockVulnerability.asset.boundDomains.map((domain) => (
                                <Badge key={domain} variant="outline">
                                    {domain}
                                </Badge>
                            ))}
                        </div>
                    </div>
                    <div className="space-y-2">
                        <div className="text-sm text-muted-foreground">资产标签</div>
                        <div className="flex flex-wrap gap-2">
                            {mockVulnerability.asset.tags.map((tag) => (
                                <Badge key={tag} variant="secondary">
                                    {tag}
                                </Badge>
                            ))}
                        </div>
                    </div>
                </CardContent>
            </Card>

            {/* 漏洞信息 */}
            <Card>
                <CardHeader>
                    <CardTitle>漏洞信息</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                    <div className="space-y-2">
                        <div className="text-sm font-medium text-muted-foreground">漏洞描述</div>
                        <p className="text-sm">{mockVulnerability.description}</p>
                    </div>

                    <div className="space-y-2">
                        <div className="text-sm font-medium text-muted-foreground">漏洞危害</div>
                        <p className="text-sm">{mockVulnerability.impact}</p>
                    </div>

                    <div className="space-y-2">
                        <div className="text-sm font-medium text-muted-foreground">修复方案</div>
                        <ul className="list-disc list-inside space-y-2 text-sm">
                            {mockVulnerability.solution.map((item, index) => (
                                <li key={index}>{item}</li>
                            ))}
                        </ul>
                    </div>

                    <div className="space-y-2">
                        <div className="text-sm font-medium text-muted-foreground">漏洞证明</div>
                        <a
                            href={mockVulnerability.proof}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-sm text-blue-500 hover:underline"
                        >
                            {mockVulnerability.proof}
                        </a>
                    </div>
                </CardContent>
            </Card>

            {/* 时间线 */}
            <Card>
                <CardHeader>
                    <CardTitle>生命周期</CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                            <div className="text-sm text-muted-foreground">首次发现</div>
                            <div className="font-medium">{mockVulnerability.timeline.firstSeen}</div>
                        </div>
                        <div className="space-y-2">
                            <div className="text-sm text-muted-foreground">最近发现</div>
                            <div className="font-medium">{mockVulnerability.timeline.lastSeen}</div>
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}
