import { getVulResultData, type VulResultData, updateStatus } from "#/api";
import { getSearchParams, getToken } from "#/lib";
import {
  redirect,
  type LoaderFunctionArgs,
  useLoaderData,
  useSearchParams,
  type SetURLSearchParams,
  useFetcher,
  type ActionFunctionArgs
} from "react-router";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  Input,
  Button,
  CustomPagination,
  Badge,
  Header,
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  errorToast,
  successToast
} from "#/components";
import {
  Search,
  RotateCcw,
  ChevronDown,
  ChevronRight,
  Clock,
  Globe,
  Shield,
  AlertTriangle,
  MoreHorizontal
} from "lucide-react";
import { useState, useEffect } from "react";
import { SCAN_TASK_ROUTE } from "#/routes";
import { cn } from "#/lib/utils";

export async function loader({ request, params }: LoaderFunctionArgs) {
  const token = await getToken(request);
  const { taskName } = params;

  if (!taskName) {
    return redirect("/404", { status: 404 });
  }

  const queryParams = getSearchParams(request, {
    search: "",
    pageSize: 10,
    pageIndex: 1
  });

  const { list, total } = await getVulResultData({
    ...queryParams,
    token,
    filter: { task: [taskName] }
  });

  return {
    success: true,
    taskName,
    vulnerabilities: list || [],
    total: total || 0,
    ...queryParams
  };
}

export async function action({ request, params }: ActionFunctionArgs) {
  const token = await getToken(request);
  const { taskName } = params;
  const formData = await request.formData();
  const vulnerabilityId = formData.get("vulnerabilityId") as string;
  const newStatus = Number(formData.get("status"));

  if (!vulnerabilityId || !newStatus || !taskName) {
    return { success: false, message: "缺少必要参数" };
  }

  try {
    await updateStatus({ token, id: vulnerabilityId, tp: "vulnerability", status: newStatus });

    return { success: true, message: "漏洞状态更新成功" };
  } catch (error) {
    console.error("Failed to update vulnerability status:", error);
    return { success: false, message: "更新漏洞状态失败" };
  }
}

function VulnerabilityPageHeader({ taskName }: { taskName: string }) {
  const breadcrumbItems = [
    { name: "扫描任务", href: SCAN_TASK_ROUTE },
    { name: taskName, isCurrent: false },
    { name: "漏洞列表", isCurrent: true }
  ];

  return <Header routes={breadcrumbItems} />;
}

export default function ScanTaskVulnerabilityListPage() {
  const { taskName, vulnerabilities, total, ...queryParams } = useLoaderData<typeof loader>();

  const [searchParams, setSearchParams] = useSearchParams();
  const [currentSearch, setCurrentSearch] = useState(queryParams.search || "");

  if (!taskName) {
    return <div>错误：任务名称未提供。</div>;
  }

  return (
    <div className="flex flex-col gap-4 max-h-screen p-2">
      <VulnerabilityPageHeader taskName={taskName} />

      <div className="flex-1 flex flex-col lg:flex-row gap-4">
        <div className="flex-1">
          <FilterBar
            search={currentSearch}
            setSearch={setCurrentSearch}
            pageIndex={queryParams.pageIndex}
            pageSize={queryParams.pageSize}
            setSearchParams={setSearchParams}
            total={total}
          />
          <VulnerabilityListSection vulnerabilities={vulnerabilities} />
        </div>
        {/* <div className="lg:w-80 max-h-[calc(100vh-12rem)] lg:max-h-[calc(100vh-12rem)]">
          <Card>
            <CardContent className="p-4">
              <h3 className="text-lg font-medium mb-2">漏洞统计</h3>
              <p className="text-sm text-muted-foreground">统计信息将在此处显示。</p>
            </CardContent>
          </Card>
        </div> */}
      </div>
    </div>
  );
}

function FilterBar({
  search,
  setSearch,
  pageIndex,
  pageSize,
  setSearchParams,
  total
}: {
  search: string;
  setSearch: (value: string) => void;
  pageIndex: number;
  pageSize: number;
  setSearchParams: SetURLSearchParams;
  total: number;
}) {
  return (
    <div className="space-y-2 sticky top-0 bg-background p-2 z-10 border-b mb-4">
      <div className="flex flex-col sm:flex-row gap-2">
        <div className="flex-1 relative">
          <Input
            className="pr-10"
            placeholder="搜索漏洞名称、URL等..."
            value={search}
            onChange={e => setSearch(e.target.value)}
            onKeyDown={e => {
              if (e.key === "Enter") {
                setSearchParams(prev => {
                  prev.set("search", search);
                  prev.set("pageIndex", "1");
                  return prev;
                });
              }
            }}
          />
        </div>
        <div className="flex gap-2">
          <Button
            variant="default"
            size="sm"
            onClick={() => {
              setSearchParams(prev => {
                prev.set("search", search);
                prev.set("pageIndex", "1");
                return prev;
              });
            }}
          >
            <Search className="h-4 w-4 mr-2" />
            搜索
          </Button>
          <Button
            variant="outline"
            size="sm"
            onClick={() => {
              setSearch("");
              setSearchParams(prev => {
                prev.delete("search");
                prev.set("pageIndex", "1");
                return prev;
              });
            }}
          >
            <RotateCcw className="h-4 w-4 mr-2" />
            重置
          </Button>
        </div>
      </div>
      <div className="flex items-center justify-between mt-2">
        <span className="text-sm text-muted-foreground">共 {total} 条结果</span>
        <CustomPagination total={total} pageIndex={pageIndex} pageSize={pageSize} setSearchParams={setSearchParams} />
      </div>
    </div>
  );
}

function VulnerabilityListSection({ vulnerabilities }: { vulnerabilities: VulResultData[] }) {
  if (vulnerabilities.length === 0) {
    return (
      <Card className="mt-4">
        <CardContent className="p-6 text-center text-muted-foreground">暂无漏洞数据</CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-4">
      {vulnerabilities.map(vuln => (
        <VulnerabilityListItem key={vuln.id} vulnerability={vuln} />
      ))}
    </div>
  );
}

const VULNERABILITY_STATUSES = [
  { value: 1, label: "待处理", color: "text-gray-500" },
  { value: 2, label: "处理中", color: "text-blue-500" },
  { value: 3, label: "已忽略", color: "text-yellow-500" },
  { value: 4, label: "疑似漏洞", color: "text-orange-500" },
  { value: 5, label: "已确认", color: "text-red-500" }
];

const getStatusByValue = (value: number) =>
  VULNERABILITY_STATUSES.find(s => s.value === value) || VULNERABILITY_STATUSES[0];

function VulnerabilityListItem({ vulnerability }: { vulnerability: VulResultData }) {
  const {
    id: vulnerabilityId,
    vulnerability: vulname,
    level,
    url,
    time,
    matched,
    request,
    response,
    status
  } = vulnerability;
  const [isExpanded, setIsExpanded] = useState(false);
  const fetcher = useFetcher();
  const initialStatus = getStatusByValue(status || 1);

  useEffect(() => {
    if (fetcher.data) {
      if (fetcher.data?.success) {
        successToast(fetcher.data?.message || "操作成功");
      } else {
        errorToast(fetcher.data?.message || "操作失败");
      }
    }
  }, [fetcher.data]);

  const handleStatusChange = (newStatusValue: number) => {
    const formData = new FormData();
    formData.append("vulnerabilityId", vulnerabilityId);
    formData.append("status", String(newStatusValue));
    fetcher.submit(formData, { method: "post" });
  };

  const levelConfig = {
    critical: {
      variant: "destructive" as const,
      className: "bg-red-600 text-white",
      icon: AlertTriangle,
      label: "致命"
    },
    high: {
      variant: "destructive" as const,
      className: "bg-orange-500 text-white",
      icon: AlertTriangle,
      label: "高危"
    },
    medium: {
      variant: "default" as const,
      className: "bg-yellow-500 text-black hover:bg-yellow-600",
      icon: Shield,
      label: "中危"
    },
    low: { variant: "secondary" as const, className: "bg-blue-500 text-white", icon: Shield, label: "低危" },
    info: { variant: "secondary" as const, className: "bg-green-500 text-white", icon: Shield, label: "信息" },
    unknown: { variant: "outline" as const, className: "bg-gray-400 text-white", icon: Shield, label: "未知" }
  };

  const levelBadge = (levelString: string) => {
    const cleanLevel = levelString?.toLowerCase() || "unknown";
    const config = levelConfig[cleanLevel as keyof typeof levelConfig] || levelConfig.unknown;
    const IconComponent = config.icon;

    return (
      <Badge variant={config.variant} className={cn("flex items-center gap-1 text-xs px-1.5 py-0.5", config.className)}>
        <IconComponent className="h-3 w-3" />
        {config.label}
      </Badge>
    );
  };

  const formatTime = (timeStr: string) => {
    try {
      return new Date(timeStr).toLocaleString("zh-CN", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit"
      });
    } catch {
      return timeStr;
    }
  };

  const formatData = (data: string, maxLength = 200) => {
    if (!data) return "无数据";
    if (data.length <= maxLength) return data;
    return data.substring(0, maxLength) + "...";
  };

  return (
    <Card className="hover:shadow-md transition-shadow border-l-4 border-l-transparent hover:border-l-primary">
      <CardHeader className="pb-3">
        <div className="flex justify-between items-start gap-4">
          <div className="flex-1 min-w-0">
            <CardTitle className="text-lg font-semibold text-primary mb-1 break-words">{vulname}</CardTitle>
            <div className="flex items-center gap-2 text-sm text-muted-foreground mb-1">
              {levelBadge(level)}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Badge
                    className={cn(
                      "text-xs font-medium cursor-pointer hover:opacity-80 transition-opacity",
                      initialStatus.color,
                      classStyleFor(initialStatus.value).replace("bg-", "border-")
                    )}
                    variant="outline"
                  >
                    <span className={cn("mr-1.5 h-2 w-2 rounded-full", classStyleFor(initialStatus.value))}></span>
                    {initialStatus.label}
                    <ChevronDown className="ml-1 h-3 w-3 opacity-70" />
                  </Badge>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuLabel>修改状态</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  {VULNERABILITY_STATUSES.map(s => (
                    <DropdownMenuItem
                      key={s.value}
                      onClick={() => handleStatusChange(s.value)}
                      disabled={s.value === initialStatus.value}
                      className={cn(s.value === initialStatus.value && "text-muted-foreground")}
                    >
                      <span className={cn("mr-2 h-2 w-2 rounded-full", classStyleFor(s.value))}></span>
                      {s.label}
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Globe className="h-4 w-4 flex-shrink-0" />
              <a
                href={url.startsWith("http") ? url : `http://${url}`}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-500 hover:underline truncate"
              >
                {url}
              </a>
            </div>
          </div>
          <div className="flex flex-col items-end gap-2">
            <div className="flex items-center gap-1 text-xs text-muted-foreground">
              <Clock className="h-3 w-3" />
              {formatTime(time)}
            </div>
          </div>
        </div>
      </CardHeader>

      <CardContent className="pt-0">
        {matched && matched !== url && (
          <div className="mb-3 p-2 bg-muted rounded-md">
            <p className="text-sm font-medium text-muted-foreground mb-1">匹配信息:</p>
            <p className="text-sm font-mono break-all">{matched}</p>
          </div>
        )}

        {(request || response) && (
          <Collapsible open={isExpanded} onOpenChange={setIsExpanded}>
            <CollapsibleTrigger asChild>
              <Button variant="ghost" size="sm" className="">
                <span className="text-sm font-medium">{`请求 / 响应详情`}</span>
                {isExpanded ? <ChevronDown className="h-4 w-4" /> : <ChevronRight className="h-4 w-4" />}
              </Button>
            </CollapsibleTrigger>
            <CollapsibleContent className="space-y-3 mt-3">
              {request && (
                <div className="space-y-2">
                  <p className="text-sm font-medium text-muted-foreground">请求数据:</p>
                  <div className="bg-muted p-3 rounded-md">
                    <pre className="text-xs font-mono whitespace-pre-wrap break-all">{formatData(request, 1000)}</pre>
                  </div>
                </div>
              )}

              {response && (
                <div className="space-y-2">
                  <p className="text-sm font-medium text-muted-foreground">响应数据:</p>
                  <div className="bg-muted p-3 rounded-md">
                    <pre className="text-xs font-mono whitespace-pre-wrap break-all">{formatData(response, 1000)}</pre>
                  </div>
                </div>
              )}
            </CollapsibleContent>
          </Collapsible>
        )}
      </CardContent>
    </Card>
  );
}

function classStyleFor(statusValue: number): string {
  switch (statusValue) {
    case 1:
      return "bg-gray-400"; // 待处理
    case 2:
      return "bg-blue-500"; // 处理中
    case 3:
      return "bg-yellow-500"; // 已忽略
    case 4:
      return "bg-orange-500"; // 疑似漏洞
    case 5:
      return "bg-red-500"; // 已确认
    default:
      return "bg-gray-300";
  }
}
